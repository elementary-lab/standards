export interface CacheInterface {
    /**
     * Builds a normalized cache key from a given key.
     *
     * If the given key is a string containing alphanumeric characters only and no more than 32 characters,
     * then the key will be returned back prefixed with [[keyPrefix]]. Otherwise, a normalized key
     * is generated by serializing the given key, applying MD5 hashing, and prefixing with [[keyPrefix]].
     *
     * @parameter any key the key to be normalized
     * @return string the generated cache key
     */
    buildKey(key: string): string;

    /**
     * Retrieves a value from cache with a specified key.
     * @parameter any key a key identifying the cached value. This can be a simple string or
     * a complex data structure consisting of factors representing the key.
     * @return any the value stored in cache, false if the value is not in the cache, expired,
     * or the dependency associated with the cached data has changed.
     */
    get<T>(key: string): Promise<T>;

    /**
     * Checks whether a specified key exists in the cache.
     * This can be faster than getting the value from the cache if the data is big.
     * In case a cache does not support this feature natively, this method will try to simulate it
     * but has no performance improvement over getting it.
     * Note that this method does not check whether the dependency associated
     * with the cached data, if there is any, has changed. So a call to [[get]]
     * may return false while exists returns true.
     * @parameter any key a key identifying the cached value. This can be a simple string or
     * a complex data structure consisting of factors representing the key.
     * @return bool true if a value exists in cache, false if the value is not in the cache or expired.
     */
    exists(key: string): Promise<boolean>;

    /**
     * Retrieves multiple values from cache with the specified keys.
     * Some caches (such as memcache, apc) allow retrieving multiple cached values at the same time,
     * which may improve the performance. In case a cache does not support this feature natively,
     * this method will try to simulate it.
     * @parameter string[] keys list of string keys identifying the cached values
     * @return array list of cached values corresponding to the specified keys. The array
     * is returned in terms of (key, value) pairs.
     * If a value is not cached or expired, the corresponding array value will be false.
     */
    multiGet(keys: string[]): any[];

    /**
     * Stores a value identified by a key into cache.
     * If the cache already contains such a key, the existing value and
     * expiration time will be replaced with the new ones, respectively.
     *
     * @parameter any key a key identifying the value to be cached. This can be a simple string or
     * a complex data structure consisting of factors representing the key.
     * @parameter any value: any the value to be cached
     * @parameter number duration: number default duration in seconds before the cache will expire. If not set,
     * default [[defaultDuration]] value is used.
     * @return bool whether the value is successfully stored into cache
     */
    set(key: string, value: any, duration?: number): Promise<boolean>;

    /**
     * Stores multiple items in cache. Each item contains a value identified by a key.
     * If the cache already contains such a key, the existing value and
     * expiration time will be replaced with the new ones, respectively.
     *
     * @parameter array items the items to be cached, as key-value pairs.
     * @parameter number duration: number default number of seconds in which the cached values will expire. 0 means never expire.
     * This parameter is ignored if [[serializer]] is false.
     * @return array array of failed keys
     */
    multiSet(items: any[], duration: number);

    /**
     * Stores a value identified by a key into cache if the cache does not contain this key.
     * Nothing will be done if the cache already contains the key.
     * @parameter any key a key identifying the value to be cached. This can be a simple string or
     * a complex data structure consisting of factors representing the key.
     * @parameter any value: any the value to be cached
     * @parameter number duration: number the number of seconds in which the cached value will expire. 0 means never expire.
     * @return bool whether the value is successfully stored into cache
     */
    add(key: string, value: any, duration: number);

    /**
     * Stores multiple items in cache. Each item contains a value identified by a key.
     * If the cache already contains such a key, the existing value and expiration time will be preserved.
     *
     * @parameter array items the items to be cached, as key-value pairs.
     * @parameter number duration: number default number of seconds in which the cached values will expire. 0 means never expire.
     * @return array array of failed keys
     */
    multiAdd(items: any[], duration: number);

    /**
     * Deletes a value with the specified key from cache.
     * @parameter any key a key identifying the value to be deleted from cache. This can be a simple string or
     * a complex data structure consisting of factors representing the key.
     * @return bool if no error happens during deletion
     */
    delete(key): boolean;

    /**
     * Deletes all values from cache.
     * Be careful of performing this operation if the cache is shared among multiple applications.
     * @return bool whether the flush operation was successful.
     */
    flush(): boolean;

    /**
     * Method combines both [[set()]] and [[get()]] methods to retrieve value identified by a key,
     * or to store the result of callable execution if there is no cache available for the key.
     *
     * Usage example:
     *
     * ```
     * getTopProducts(count = 10) {
     *     cache = this->cache;
     *     return cache->getOrSet(['top-n-products', 'n' => count], (cache) use (count) {
     *         return Products::find()->mostPopular()->limit(count)->all();
     *     }, 1000);
     * }
     * ```
     *
     * @parameter any key a key identifying the value to be cached. This can be a simple string or
     * a complex data structure consisting of factors representing the key.
     * @parameter callable|\Closure callable the callable or closure that will be used to generate a value to be cached.
     * In case callable returns `false`, the value will not be cached.
     * @parameter number duration: number default duration in seconds before the cache will expire. If not set,
     * [[defaultDuration]] value will be used.
     * @return any result of callable execution
     */
    getOrSet(key: string, callable: () => void, duration?: number);
}
